"""
연산자
소괄호 > 산술연산자(*, /, // > +, -) > 관계연산자(>, >=, ==, !=, <, <=) >
 논리연산자(not, and, or) > 치환(=)
"""

v1 = 3 #치환 obj 데이터의 주소를 넣음
v1 = v2 = v3 = 2
print(v1, v2, v3)
print(id(v1), id(v2), id(v3))

v1, v2= 10, 20 #이런 식으로 한 번에 주입도 가능
print(v1, v2)

print("packing 연산자 :  *,**")
#v1, v2 = [1, 2, 3] 묶음 연산자 이렇게 하면 하나가 더 많다고 오류가 생김
v1, *v2 = [1, 2, 3, 4, 5] #v1= [1, 2, 3, 4, 5] 이렇게 하면 v1이 나머지 모두를 가짐
print(v1, v2) #v1은 하나만 가지고 나머지를 v2가 가짐
*v1, v2 = [1, 2, 3, 4, 5]
print(v1, v2) #맨 마지막 만을 v2가 가짐
*v1, v2, v3 = [1, 2, 3, 4, 5] #packing 연산자를 *v1, *v2, v3 = [1, 2, 3, 4, 5] 2군데 이상 사용하면 에러가 생김
print(v1, v2, v3)
v1, *v2, v3 = [1, 2, 3, 4, 5]
print(v1, v2, v3)

print("-연산자 연습---")
print(5 + 3, 5 - 3, 5 * 3, 5 ** 3, 5 / 3, 5 // 3, 5 % 3) #5 ** 3은 거듭 제곱, 5 / 3 은 몫의 실수, 5 // 3은 몫의 정수, 5 % 3은 나머지의 정수
print(divmod(5,3)) #몫과 나머지 (1,2)
print("연산자 우선 순위 : ", 3 + 4 * 5) #*가 +나 -보다 우선 순위가 높음
print("연산자 우선 순위 : ", (3 + 4) * 5) #먼저 해야할 경우 괄호를 사용하여 우선 순위를 높임

print(5 > 3, 5 == 3, 5 != 3)
print(5 > 3 and 4 < 3, 5 >= 3 or 4 <= 3, not(5 > 3)) #not은 나온 답을 부정하니 false가 나옴

print("문자열 더하기") #python의 print는 java의 println과 같음 출력과 개행기호를 동시에 이행함
print("이어쓰기", end = "문자열을 뒤에 붙이고 싶으면 , end = " " ") #커서가 내려가지 않고 문자열 뒤에 붙어있음
print("대한"+"민"+"국 만세") #문자열 뒤에 +가 있으면 문자열이 붙음, end 명령어 뒤에 붙은 문자열은 개행기호가 없어 위의 문자열 뒤에 붙는다
print("한국" * 20) #문자열 뒤에 곱하기 연산자가 붙으면 해당 숫자만큼 문자가 반복됨

a = 10
a = a + 1
print("누적 결과1 : ", a) #뒤에 붙이고 싶으면 , 를 붙여야 함
a += 1 #a에 1이 +됨 곱하기, 나누기, 등등 가능
print("누적 결과2 : ", a) #나온 결과에 +1이 된 숫자가 a에 들어가지만 java의 문법처럼 a++나 ++a는 안 됨
#a++ ++a 사용 XX 이런 방식은 python에서 부호로 사용됨
a =+ 1 #js와 달리 순서는 중요하지 않다 이렇게 하면 정수인 +1이 a에 치환됨
print("누적 결과3 : ", a)
print("부호 변경 : ", a, a*-1, -a, --a, +a, ++a) #변수에 -1을 곱하면 부호가 변경됨

print("문자 숫자 형변환")
#print(5 + "5") unsupported operand type(s) for +: 'float', 'int' and 'str' 숫자 5와 문자 5를 더할 수는 없음
print(5 + int("5")) #숫자 10 string 타입인 5를 정수로 casting해준 후 더함 
print(str(5) + "5") #문자 55 int 타입인 정수 5를 string로 castiong 해준 후 더함 문자열은 +를 하면 뒤에 문자를 붙임
print("나이는 : " + str(23) + "살 입니다. ")

print("escape 문자 ---")
print("kbs\nmbc")   # \n, \b, \a, \t ... \n은 개행기호 그래서 kbs와 mbc는 출력되는 칸이 다름
print(r"c:\nbc\tbs\abc.txt")    #escape문자를 읽고 싶지 않으면 앞에 선행 문자 r을 붙인다

print()
print(True, bool(True), False, bool(False)) #True의 boolean 값은 True니 bool(True)은 True
print(bool(-1), bool(2.3), bool(123), bool("abc"))
print(bool(0), bool(""), bool(None), bool([]), bool({}))
#값이 없으면 False 0이외에 숫자는 True
#print() 함수에 서식 넣기 #format(실수, ‘전체자릿수.소수이하자릿수<서식기호>’)
print()
print(print(format(123.0456789, '10.3f'))) #전체 10 자리 중에 소수점은 3자리 까지만 표현
print(format(123.4567, '10.3')) #과학적 표기법 1.23 * 10의 2제곱   10.3 -> 뒤의 .3만큼 앞에서부터 숫자가 출력됨
print(format(123, '10d')) #정수 10자리를 정의한다 정수 123의 경우 앞의 7자리는 공백으로 채워짐

print()
#%d는 정수 %s는 문자열 %f는 실수 
print('나는 나이가 %d 이다.'%23) #정수 23이 %d의 자리로 들어감
print('나는 나이가 %s 이다.'%'스물셋')
print('나는 나이가 %d 이고 이름은 %s이다.'%(23, '홍길동')) #복수일 경우에는 소괄호 안에 넣으면 됨
print('나는 나이가 %s 이고 이름은 %s이다.'%(23, '홍길동')) #정수 23을 문자열로 대입할 거라 %s로 입력해도 상관X
print('나는 키가 %f이고, 에너지가 %d%%.'%(177.7, 100)) #%를 붙이고 싶으면 %%해야 함
print('이름은 {0}, 나이는 {1}'.format('한국인', 33)) #format은 0, 1, 2... 늘어나서 {0}에 format의 한국인이 들어감
print('이름은 {}, 나이는 {}'.format('신선해', 33)) #순서대로 대입할 거면 숫자는 안 적어도 됨
print('이름은 {1}, 나이는 {0}'.format(34, '강나루')) #강나루, 34 순으로 들어감 숫자 순서 중요







